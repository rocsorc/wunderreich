plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven { url "https://maven.shedaniel.me" }
    maven { url "https://maven.bai.lol" }
    maven { url 'https://maven.terraformersmc.com/releases' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.ambertation.de/releases' }
    flatDir { dirs 'libs' }
}

loom {
    accessWidenerPath = file("src/main/resources/wunderreich.accesswidener")
}

def local_wunderlib = findProject(':WunderLib') != null

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modCompileOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"

    modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}"

    modCompileOnly "mcp.mobius.waila:wthit-api:fabric-${project.wthit_version}" // compile against the API
    modLocalRuntime "mcp.mobius.waila:wthit:fabric-${project.wthit_version}" // run against the full jar

    modCompileOnly "dev.emi:emi-fabric:${emi_version}:api"
    modLocalRuntime "dev.emi:emi-fabric:${emi_version}"

    println "Using local WunderLib: ${local_wunderlib}"
    if (local_wunderlib) {
        implementation project(path: ":WunderLib", configuration: 'dev')
        include project(path: ":WunderLib", configuration: 'dev')
    } else {
        modApi "de.ambertation:wunderlib:${project.wunderlib_version}"
        include "de.ambertation:wunderlib:${project.wunderlib_version}"
    }
}
//
//// Force Loom to remap the local project
//afterEvaluate {
//    if (local_wunderlib) {
//        tasks.named("remapJar").configure {
//            dependsOn ":WunderLib:remapJar"
//        }
//    }
//}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

apply from: "helper.gradle"

allprojects {
    // Allow 400 errors.
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "5000"
            //<< "-Xlint:rawtypes"
            //<< "-Xlint:unchecked"
            //<< "-Xlint:deprecation"
        }
    }
}
